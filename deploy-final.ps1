# Script de d√©ploiement final WebKlor
# Int√®gre build, sitemap, et d√©ploiement Vercel

param(
    [Parameter(Mandatory=$true)]
    [string]$Domain,
    [switch]$Production = $false,
    [switch]$SkipBuild = $false,
    [switch]$SkipSitemap = $false
)

Write-Host "üöÄ D√©ploiement Final WebKlor" -ForegroundColor Green
Write-Host "=============================" -ForegroundColor Green

$CleanDomain = $Domain -replace '^https?://', '' -replace '^www\.', ''
$FullDomain = "https://$CleanDomain"

Write-Host "üåê Domaine cible: $FullDomain" -ForegroundColor Cyan
Write-Host "üéØ Mode: $(if ($Production) { 'PRODUCTION' } else { 'TEST' })" -ForegroundColor $(if ($Production) { 'Red' } else { 'Yellow' })
Write-Host ""

# √âtape 1: Validation pr√©-d√©ploiement
Write-Host "1Ô∏è‚É£ Validation pr√©-d√©ploiement..." -ForegroundColor Yellow

try {
    # V√©rifier Node.js
    $nodeVersion = node --version
    Write-Host "   ‚úÖ Node.js: $nodeVersion" -ForegroundColor Green
    
    # V√©rifier npm
    $npmVersion = npm --version
    Write-Host "   ‚úÖ npm: $npmVersion" -ForegroundColor Green
    
    # V√©rifier Vercel CLI
    try {
        $vercelVersion = vercel --version
        Write-Host "   ‚úÖ Vercel CLI: $vercelVersion" -ForegroundColor Green
    } catch {
        Write-Host "   ‚ö†Ô∏è Vercel CLI non install√©. Installation..." -ForegroundColor Yellow
        npm install -g vercel
    }
    
} catch {
    Write-Host "   ‚ùå Erreur de validation: $_" -ForegroundColor Red
    exit 1
}

# √âtape 2: Build de production
if (-not $SkipBuild) {
    Write-Host "`n2Ô∏è‚É£ Build de production..." -ForegroundColor Yellow
    
    try {
        # Installer les d√©pendances
        Write-Host "   üì¶ Installation des d√©pendances..." -ForegroundColor Gray
        npm install
        
        # Build
        Write-Host "   üèóÔ∏è Construction du build..." -ForegroundColor Gray
        npm run build
        
        # V√©rifier le build
        if (Test-Path "dist") {
            $buildSize = (Get-ChildItem "dist" -Recurse | Measure-Object -Property Length -Sum).Sum
            $buildSizeMB = [Math]::Round($buildSize / 1MB, 2)
            Write-Host "   ‚úÖ Build r√©ussi ($buildSizeMB MB)" -ForegroundColor Green
        } else {
            throw "Dossier dist/ non g√©n√©r√©"
        }
        
    } catch {
        Write-Host "   ‚ùå Erreur de build: $_" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "`n2Ô∏è‚É£ Build ignor√© (--SkipBuild)" -ForegroundColor Gray
}

# √âtape 3: G√©n√©ration du sitemap
if (-not $SkipSitemap) {
    Write-Host "`n3Ô∏è‚É£ G√©n√©ration du sitemap..." -ForegroundColor Yellow
    
    try {
        # Configurer les variables d'environnement
        $env:SITE_DOMAIN = $CleanDomain
        $env:API_URL = "$FullDomain/api"
        
        # Ex√©cuter le script de mise √† jour du sitemap
        & ".\update-sitemap.ps1" -Domain $CleanDomain -ApiUrl "$FullDomain/api"
        
        Write-Host "   ‚úÖ Sitemap g√©n√©r√©" -ForegroundColor Green
        
    } catch {
        Write-Host "   ‚ö†Ô∏è Erreur sitemap: $_" -ForegroundColor Yellow
        Write-Host "   üìù Utilisation du sitemap par d√©faut" -ForegroundColor Gray
    }
} else {
    Write-Host "`n3Ô∏è‚É£ Sitemap ignor√© (--SkipSitemap)" -ForegroundColor Gray
}

# √âtape 4: Configuration des variables d'environnement Vercel
Write-Host "`n4Ô∏è‚É£ Configuration Vercel..." -ForegroundColor Yellow

try {
    # Variables d'environnement pour Vercel
    $envVars = @{
        "FRONTEND_URL" = $FullDomain
        "NODE_ENV" = "production"
        "SITE_DOMAIN" = $CleanDomain
    }
    
    Write-Host "   ‚öôÔ∏è Variables d'environnement configur√©es:" -ForegroundColor Gray
    foreach ($var in $envVars.GetEnumerator()) {
        Write-Host "      ‚Ä¢ $($var.Key): $($var.Value)" -ForegroundColor Gray
        
        # Configurer la variable sur Vercel (si en production)
        if ($Production) {
            try {
                vercel env add $var.Key production --value $var.Value --force
            } catch {
                Write-Host "      ‚ö†Ô∏è Impossible de configurer $($var.Key)" -ForegroundColor Yellow
            }
        }
    }
    
} catch {
    Write-Host "   ‚ö†Ô∏è Erreur configuration: $_" -ForegroundColor Yellow
}

# √âtape 5: D√©ploiement
Write-Host "`n5Ô∏è‚É£ D√©ploiement..." -ForegroundColor Yellow

try {
    if ($Production) {
        Write-Host "   üöÄ D√©ploiement en production..." -ForegroundColor Red
        
        # D√©ploiement production
        $deployResult = vercel --prod --yes
        
        Write-Host "   ‚úÖ D√©ploiement production r√©ussi" -ForegroundColor Green
        
    } else {
        Write-Host "   üß™ D√©ploiement de test..." -ForegroundColor Yellow
        
        # D√©ploiement preview
        $deployResult = vercel --yes
        
        Write-Host "   ‚úÖ D√©ploiement test r√©ussi" -ForegroundColor Green
    }
    
    # Extraire l'URL de d√©ploiement
    if ($deployResult) {
        $deployUrl = $deployResult | Select-String -Pattern "https://.*\.vercel\.app" | ForEach-Object { $_.Matches[0].Value }
        if ($deployUrl) {
            Write-Host "   üîó URL de d√©ploiement: $deployUrl" -ForegroundColor Cyan
        }
    }
    
} catch {
    Write-Host "   ‚ùå Erreur de d√©ploiement: $_" -ForegroundColor Red
    exit 1
}

# √âtape 6: Validation post-d√©ploiement
Write-Host "`n6Ô∏è‚É£ Validation post-d√©ploiement..." -ForegroundColor Yellow

try {
    # Attendre quelques secondes pour la propagation
    Write-Host "   ‚è≥ Attente de la propagation..." -ForegroundColor Gray
    Start-Sleep -Seconds 10
    
    # Tester l'accessibilit√© du site
    $testUrl = if ($deployUrl) { $deployUrl } else { $FullDomain }
    $response = Invoke-WebRequest -Uri $testUrl -TimeoutSec 15 -UseBasicParsing
    
    if ($response.StatusCode -eq 200) {
        Write-Host "   ‚úÖ Site accessible (HTTP $($response.StatusCode))" -ForegroundColor Green
        
        # Tester le sitemap
        try {
            $sitemapResponse = Invoke-WebRequest -Uri "$testUrl/sitemap.xml" -TimeoutSec 10 -UseBasicParsing
            if ($sitemapResponse.StatusCode -eq 200) {
                $urlCount = ([regex]::Matches($sitemapResponse.Content, '<url>')).Count
                Write-Host "   ‚úÖ Sitemap accessible ($urlCount URLs)" -ForegroundColor Green
            }
        } catch {
            Write-Host "   ‚ö†Ô∏è Sitemap non accessible" -ForegroundColor Yellow
        }
        
        # Tester robots.txt
        try {
            $robotsResponse = Invoke-WebRequest -Uri "$testUrl/robots.txt" -TimeoutSec 10 -UseBasicParsing
            if ($robotsResponse.StatusCode -eq 200) {
                Write-Host "   ‚úÖ Robots.txt accessible" -ForegroundColor Green
            }
        } catch {
            Write-Host "   ‚ö†Ô∏è Robots.txt non accessible" -ForegroundColor Yellow
        }
        
    } else {
        Write-Host "   ‚ö†Ô∏è Site accessible mais statut: $($response.StatusCode)" -ForegroundColor Yellow
    }
    
} catch {
    Write-Host "   ‚ö†Ô∏è Impossible de valider le d√©ploiement: $_" -ForegroundColor Yellow
}

# R√©sum√© final
Write-Host "`nüéâ D√©ploiement termin√© !" -ForegroundColor Green
Write-Host "========================" -ForegroundColor Green

Write-Host "üìä R√©sum√©:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ Domaine: $FullDomain" -ForegroundColor White
Write-Host "   ‚Ä¢ Mode: $(if ($Production) { 'PRODUCTION' } else { 'TEST' })" -ForegroundColor White
Write-Host "   ‚Ä¢ Build: $(if (-not $SkipBuild) { '‚úÖ Effectu√©' } else { '‚è≠Ô∏è Ignor√©' })" -ForegroundColor White
Write-Host "   ‚Ä¢ Sitemap: $(if (-not $SkipSitemap) { '‚úÖ G√©n√©r√©' } else { '‚è≠Ô∏è Ignor√©' })" -ForegroundColor White

if ($deployUrl) {
    Write-Host "   ‚Ä¢ URL de d√©ploiement: $deployUrl" -ForegroundColor Cyan
}

Write-Host "`nüîç Prochaines √©tapes:" -ForegroundColor Yellow
Write-Host "   1. Testez toutes les fonctionnalit√©s sur le site d√©ploy√©" -ForegroundColor White
Write-Host "   2. Configurez votre domaine personnalis√© sur Vercel" -ForegroundColor White
Write-Host "   3. Soumettez le sitemap √† Google Search Console" -ForegroundColor White
Write-Host "   4. Configurez Google Analytics" -ForegroundColor White
Write-Host "   5. Cr√©ez votre premier utilisateur administrateur" -ForegroundColor White

Write-Host "`n‚ú® WebKlor est pr√™t pour le web !" -ForegroundColor Green
